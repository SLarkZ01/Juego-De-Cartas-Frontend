openapi: 3.0.3
info:
  title: Juego De Cartas API
  version: 2.0.0
  description: >-
    API REST para el backend de "Juego De Cartas" (Card Match Battle) con autenticación JWT.
    Especificación alineada con los controladores actuales en `src/main/java/.../controller/rest`.
servers:
  - url: http://localhost:8080
    description: Development server

security:
  - BearerAuth: []

paths:
  /auth/register:
    post:
      summary: Registrar nuevo usuario
      description: >-
        Registra un nuevo usuario con username, email y password.
        El username se usará como identificador en las partidas.
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Error de validación o usuario ya existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: Iniciar sesión
      description: >-
        Inicia sesión con username o email y password.
        Puedes usar indistintamente el username o el email para iniciar sesión.
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/cartas:
    get:
      summary: Listar cartas
      description: Lista todas las cartas. Puede filtrarse por temática con el query parameter `tematica`.
      tags:
        - Cartas
      parameters:
        - in: query
          name: tematica
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Lista de cartas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Carta'

  /api/cartas/{codigo}:
    get:
      summary: Obtener carta por código
      tags:
        - Cartas
      parameters:
        - in: path
          name: codigo
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Carta encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carta'
        '404':
          description: Carta no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/cartas/sincronizar:
    post:
      summary: Sincronizar cartas desde API externa
      tags:
        - Cartas
      responses:
        '200':
          description: Cartas sincronizadas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Carta'

  /api/partidas/crear:
    post:
      summary: Crear partida
      description: >-
        Crea una nueva partida. El usuario autenticado se convierte en el jugador 1 (creador).
        El nombre del jugador mostrado es el username del usuario (único e identificable).
        Se requieren mínimo 2 jugadores para iniciar la partida.
      tags:
        - Partidas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrearPartidaRequest'
      responses:
        '200':
          description: Partida creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartidaResponse'

  /auth/logout:
    post:
      summary: Cerrar sesión (logout)
      description: >-
        Endpoint para indicar al servidor que el cliente realiza un logout.
        En este sistema stateless con JWT no se realiza invalidación automática del token
        salvo que se implemente un mecanismo de revocación (blacklist). El frontend debe
        eliminar el token localmente tras recibir 200 OK.
      tags:
        - Authentication
      requestBody:
        required: false
        content:
          application/json: {}
      responses:
        '200':
          description: Logout aceptado. El cliente debe limpiar credenciales locales.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Logout exitoso"

  /api/partidas/{codigo}/unirse:
    post:
      summary: Unirse a partida existente
      description: >-
        Une al usuario autenticado a una partida existente.
        El nombre del jugador mostrado es el username del usuario (único e identificable).
        La partida se inicia automáticamente cuando se une el 7mo jugador (máximo).
      tags:
        - Partidas
      parameters:
        - in: path
          name: codigo
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnirsePartidaRequest'
      responses:
        '200':
          description: Jugador unido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartidaResponse'

  /api/partidas/{codigo}:
    get:
      summary: Obtener información básica de la partida
      tags:
        - Partidas
      parameters:
        - in: path
          name: codigo
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Información de la partida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartidaResponse'

  /api/partidas/{codigo}/detalle:
    get:
      summary: Obtener detalle completo de la partida para un jugador
      description: >-
        Devuelve la vista de la partida desde la perspectiva de `jugadorId`.
        Incluye `miJugador` con las cartas en mano del jugador solicitado y `jugadores`
        con la información pública del resto.
      tags:
        - Partidas
      parameters:
        - in: path
          name: codigo
          required: true
          schema:
            type: string
        - in: query
          name: jugadorId
          required: true
          schema:
            type: string
          description: ID del jugador que solicita el detalle (se usa para devolver `miJugador`)
      responses:
        '200':
          description: Detalle de la partida para el jugador
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartidaDetailResponse'
              example:
                codigo: "ABC123"
                jugadorId: "player-uuid-1234"
                estado: "EN_CURSO"
                turnoActual: "player-uuid-5678"
                atributoSeleccionado: "poder"
                jugadores:
                  - id: "player-uuid-1234"
                    nombre: "Goku"
                    numeroCartas: 5
                    orden: 1
                    conectado: true
                  - id: "player-uuid-5678"
                    nombre: "Vegeta"
                    numeroCartas: 5
                    orden: 2
                    conectado: true
                miJugador:
                  id: "player-uuid-1234"
                  nombre: "Goku"
                  cartasEnMano:
                    - "1A"
                    - "2B"
                    - "3C"
                  cartaActual: "1A"
                  numeroCartas: 5
                  transformacionActiva: "Super Saiyan"
                  indiceTransformacion: 0
                tiempoRestante: 1200

        '400':
          description: Parámetros inválidos (ej. falta jugadorId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 400
                error: "Bad Request"
                message: "Parámetro 'jugadorId' es obligatorio"
                path: "/api/partidas/ABC123/detalle"
                timestamp: "2025-10-09T12:00:00Z"

        '404':
          description: Partida o jugador no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 404
                error: "Not Found"
                message: "Partida 'ABC123' no encontrada"
                path: "/api/partidas/ABC123/detalle"
                timestamp: "2025-10-09T12:00:00Z"

  /api/partidas/{codigo}/iniciar:
    post:
      summary: Iniciar partida
      description: Inicia la partida. Requiere mínimo 2 jugadores.
      tags:
        - Partidas
      parameters:
        - in: path
          name: codigo
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Partida iniciada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partida'

  /api/partidas/{codigo}/reconectar:
    post:
      summary: Reconectar a una partida (marcar jugador como conectado)
      description: >-
        Marca al jugador como conectado en la partida especificada. Si se incluye
        `jugadorId` en el body, se usará para identificar al jugador. Si no se
        incluye, el servidor intentará identificar al usuario mediante el token JWT
        del request y reconectará su correspondiente jugador en la partida.
      tags:
        - Partidas
      parameters:
        - in: path
          name: codigo
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReconectarRequest'
      responses:
        '200':
          description: Jugador reconectado. Devuelve el estado actualizado de la partida.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartidaResponse'
        '400':
          description: Partida no encontrada o parámetro inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/partidas/{codigo}/seleccionar-atributo:
    post:
      summary: Seleccionar atributo para la ronda
      tags:
        - Gameplay
      parameters:
        - in: path
          name: codigo
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeleccionarAtributoRequest'
      responses:
        '200':
          description: Atributo seleccionado exitosamente

  /api/partidas/{codigo}/jugar:
    post:
      summary: Jugar carta en la ronda actual
      tags:
        - Gameplay
      parameters:
        - in: path
          name: codigo
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JugarCartaRequest'
      responses:
        '200':
          description: Carta jugada exitosamente

  /api/partidas/{codigo}/transformaciones/activar:
    post:
      summary: Activar transformación
      tags:
        - Transformaciones
      parameters:
        - in: path
          name: codigo
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivarTransformacionRequest'
      responses:
        '200':
          description: Transformación activada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformacionResponse'

  /api/partidas/{codigo}/transformaciones/desactivar:
    post:
      summary: Desactivar transformación
      tags:
        - Transformaciones
      parameters:
        - in: path
          name: codigo
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DesactivarTransformacionRequest'
      responses:
        '200':
          description: Transformación desactivada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformacionResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >-
        JWT token obtenido tras login o registro.
        Formato: `Authorization: Bearer <token>`

  schemas:
    RegisterRequest:
      type: object
      description: Request opcional para reconectar por jugadorId
      properties:
        jugadorId:
          type: string
          description: ID del jugador (opcional). Si se provee, se reconectará ese jugador.
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
          description: Nombre de usuario único (se usará como identificador en las partidas)
        email:
          type: string
          format: email
          description: Email único del usuario
        password:
          type: string
          minLength: 6
          description: Contraseña (mínimo 6 caracteres)
      required: [username, email, password]

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          description: Nombre de usuario o email para iniciar sesión
        password:
          type: string
          description: Contraseña del usuario
      required: [username, password]

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token para autenticación
        userId:
          type: string
          description: ID del usuario
        username:
          type: string
          description: Nombre de usuario (usado como identificador en partidas)
        email:
          type: string
          description: Email del usuario

    Carta:
      type: object
      properties:
        id:
          type: string
        codigo:
          type: string
        nombre:
          type: string
        imagenUrl:
          type: string
        atributos:
          type: object
          additionalProperties:
            type: integer
        tematica:
          type: string
        paquete:
          type: integer
        descripcion:
          type: string
        raza:
          type: string
        genero:
          type: string
        afiliacion:
          type: string
        planeta:
          type: object
          properties:
            nombre:
              type: string
            imagen:
              type: string
            descripcion:
              type: string
            isDestroyed:
              type: boolean
        transformaciones:
          type: array
          items:
            type: object
            properties:
              nombre:
                type: string
              imagen:
                type: string
              ki:
                type: string

    CrearPartidaRequest:
      type: object
      description: >-
        No requiere parámetros. El nombre del jugador se obtiene del usuario autenticado.
      properties: {}

    UnirsePartidaRequest:
      type: object
      description: >-
        No requiere parámetros. El nombre del jugador se obtiene del usuario autenticado.
      properties: {}

    SeleccionarAtributoRequest:
      type: object
      properties:
        jugadorId:
          type: string
        atributo:
          type: string
      required: [jugadorId, atributo]

    JugarCartaRequest:
      type: object
      properties:
        jugadorId:
          type: string
      required: [jugadorId]

    ActivarTransformacionRequest:
      type: object
      properties:
        jugadorId:
          type: string
        indiceTransformacion:
          type: integer
          minimum: 0
      required: [jugadorId, indiceTransformacion]

    DesactivarTransformacionRequest:
      type: object
      properties:
        jugadorId:
          type: string
      required: [jugadorId]

    TransformacionResponse:
      type: object
      properties:
        jugadorId:
          type: string
        nombreJugador:
          type: string
        nombreTransformacion:
          type: string
          nullable: true
        indiceTransformacion:
          type: integer
        multiplicador:
          type: number
          format: double
        mensaje:
          type: string
        exitoso:
          type: boolean

    PartidaResponse:
      type: object
      properties:
        codigo:
          type: string
        jugadorId:
          type: string
        jugadores:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              nombre:
                type: string

    Partida:
      type: object
      properties:
        id:
          type: string
        codigo:
          type: string
        estado:
          type: string
        jugadores:
          type: array
          items:
            $ref: '#/components/schemas/Jugador'
        cartasEnMesa:
          type: array
          items:
            type: object
        turnoActual:
          type: string
        atributoSeleccionado:
          type: string
        ganador:
          type: string
        tiempoLimite:
          type: integer

    PartidaDetailResponse:
      type: object
      properties:
        codigo:
          type: string
        jugadorId:
          type: string
        estado:
          type: string
        turnoActual:
          type: string
        atributoSeleccionado:
          type: string
        jugadores:
          type: array
          items:
            $ref: '#/components/schemas/JugadorPublic'
        miJugador:
          $ref: '#/components/schemas/JugadorPrivate'
        tiempoRestante:
          type: integer

    Jugador:
      type: object
      properties:
        id:
          type: string
        nombre:
          type: string
        cartasEnMano:
          type: array
          items:
            type: string
        cartaActual:
          type: string
        numeroCartas:
          type: integer
        orden:
          type: integer
        conectado:
          type: boolean
        transformacionActiva:
          type: string
        indiceTransformacion:
          type: integer

    JugadorPublic:
      type: object
      properties:
        id:
          type: string
        nombre:
          type: string
        numeroCartas:
          type: integer
        orden:
          type: integer
        conectado:
          type: boolean

    JugadorPrivate:
      type: object
      properties:
        id:
          type: string
        nombre:
          type: string
        cartasEnMano:
          type: array
          items:
            type: string
        cartaActual:
          type: string
        numeroCartas:
          type: integer
        transformacionActiva:
          type: string
        indiceTransformacion:
          type: integer

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
        timestamp:
          type: string
